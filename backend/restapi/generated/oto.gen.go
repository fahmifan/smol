// Code generated by oto; DO NOT EDIT.

package generated

import (
	"context"
	"net/http"

	"github.com/pacedotdev/oto/otohttp"
)

type SmolService interface {
	AddTodo(context.Context, AddTodoRequest) (*Todo, error)
}

type smolServiceServer struct {
	server      *otohttp.Server
	smolService SmolService
}

// Register adds the SmolService to the otohttp.Server.
func RegisterSmolService(server *otohttp.Server, smolService SmolService) {
	handler := &smolServiceServer{
		server:      server,
		smolService: smolService,
	}
	server.Register("SmolService", "AddTodo", handler.handleAddTodo)
}

func (s *smolServiceServer) handleAddTodo(w http.ResponseWriter, r *http.Request) {
	var request AddTodoRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.smolService.AddTodo(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

type AddTodoRequest struct {
	Item string `json:"item"`
	Done bool   `json:"done"`
}

type Todo struct {
	ID     string `json:"id"`
	UserID string `json:"userID"`
	Done   bool   `json:"done"`
	Detail string `json:"detail"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}
