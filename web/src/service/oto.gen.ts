// Code generated by oto; DO NOT EDIT.

// HeadersFunc allows you to mutate headers for each request.
// Useful for adding authorization into the client.
interface HeadersFunc {
	(headers: Headers): void;
}

// Client provides access to remote services.
export class Client {
	// basepath is the path prefix for the requests.
	// This may be a path, or an absolute URL.
	public basepath: String = '/api/oto/'
	// headers allows calling code to mutate the HTTP
	// headers of the underlying HTTP requests.
	public headers?: HeadersFunc
}


export class SmolService {
	constructor(readonly client: Client) {}
	
		async addTodo(addTodoRequest?: AddTodoRequest, modifyHeaders?: HeadersFunc): Promise<Todo> {
		if (addTodoRequest == null) {
			addTodoRequest = new AddTodoRequest();
		}
		const headers: Headers = new Headers();
		headers.set('Accept', 'application/json');
		headers.set('Content-Type', 'application/json');
		if (this.client.headers) {
			await this.client.headers(headers);
		}
		if (modifyHeaders) {
			await modifyHeaders(headers)
		}
		const response = await fetch(this.client.basepath + 'SmolService.AddTodo', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(addTodoRequest),
		})
		if (response.status !== 200) {
			throw new Error(`SmolService.AddTodo: ${response.status} ${response.statusText}`);
		}
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error);
			}
			return new Todo(json);
		})
	}
	
}



export class AddTodoRequest {
	constructor(data?: any) {
		if (data) {
		
			
			this.item = data.item;
			
		
			
			this.done = data.done;
			
		
		}
	}

		item: string = stringDefault;

		done: boolean = booleanDefault;

}

export class Todo {
	constructor(data?: any) {
		if (data) {
		
			
			this.id = data.id;
			
		
			
			this.userID = data.userID;
			
		
			
			this.done = data.done;
			
		
			
			this.detail = data.detail;
			
		
			
			this.error = data.error;
			
		
		}
	}

		id: string = stringDefault;

		userID: string = stringDefault;

		done: boolean = booleanDefault;

		detail: string = stringDefault;

	// Error is string explaining what went wrong. Empty if everything was fine.
	error: string = stringDefault;

}


// these defaults make the template easier to write.
const stringDefault = ''
const numberDefault = 0
const booleanDefault = false 
const anyDefault = null
